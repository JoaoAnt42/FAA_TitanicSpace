from sklearn.base import TransformerMixin

class MyCustomStep(TransformerMixin):
  def transform(self, X, **kwargs):
    X['PassengerId_split'] = X['PassengerId'].apply(lambda x : str(x).split(sep = '_', maxsplit=1))
    X['Group']= X['PassengerId_split'].apply(lambda x : np.nan if x[0] == 'nan' else x[0])
    X['Group_id']= X['PassengerId_split'].apply(lambda x : np.nan if x[0] == 'nan' else x[1])
    X = X.drop(['PassengerId','PassengerId_split'],axis=1)

    # Split the names
    X['Name_split'] = X['Name'].apply(lambda x : str(x).split(sep = ' ', maxsplit=1))
    X['Surname']= X['Name_split'].apply(lambda x : np.nan if x[0] == 'nan' else x[1])
    X = X.drop(['Name','Name_split'],axis=1)

    # Split the cabins
    X['Cabin_splt'] = X['Cabin'].apply(lambda x : str(x).split(sep = '/'))
    X['Deck']= X['Cabin_splt'].apply(lambda x : np.nan if x[0] == 'nan' else x[0])
    X['CabinNumber']= X['Cabin_splt'].apply(lambda x : np.nan if x[0] == 'nan' else x[1]).astype('float')
    X['CabinSide']= X['Cabin_splt'].apply(lambda x : np.nan if x[0] == 'nan' else x[2])
    X = X.drop(['Cabin','Cabin_splt'],axis=1)

    # Create Total
    numeric_cols = list(X.select_dtypes(include = np.number).columns)
    X['Total'] = sum(X[col] for col in numeric_cols if col not in ["Age", "CabinNumber"])
    X['age'] = pd.cut(x=X['Age'], bins=range(0, 90, 10))
    X['total'] = pd.cut(x=X['Total'], bins=[-35.987, 3598.7, 7197.4, 10796.1, 14394.8, 17993.5, 21592.2, 25190.9, 28789.6, 32388.3, 35987.])
    X = X.drop(['Age', "Total"],axis=1)
    return X
    
  def fit(X, y=None, **kwargs):
    return self